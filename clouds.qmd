---
title: "Sentinel-2 cloud statistics"
format:
  html:
    toc: false
    echo: false
    keep-hidden: true
    code-tools: true
---


A simple example for cloud statistics from our data in the recent GRL paper (just for one location in the Amazon):


```{ojs}
//| panel: input
viewof point = {
  const width = 600.0
  const height = width / 2;
  const context = DOM.context2d(width, height);
  const projection = d3.geoEqualEarth().fitSize([width, height], {type: "Sphere"});
  const path = d3.geoPath(projection, context);
  let mousedown = false;

  context.beginPath(), path(graticule), context.strokeStyle = "#ccc", context.stroke();
  context.beginPath(), path(land), context.fill();
  context.beginPath(), path(sphere), context.strokeStyle = "#000", context.stroke();
  context.lineWidth = 2, context.strokeStyle = "#f00";
  const image = context.getImageData(0, 0, context.canvas.width, context.canvas.height);

  function render(coordinates) {
    context.canvas.value = coordinates;
    context.clearRect(0, 0, width, height);
    context.putImageData(image, 0, 0);
    context.beginPath(), path({type: "Point", coordinates}), context.stroke();
  }

  context.canvas.onmousedown = event => {
    mousedown = true;
    context.canvas.onmousemove(event);
  };

  context.canvas.onmousemove = ({layerX, layerY}) => {
    if (!mousedown) return;
    render(projection.invert([layerX, layerY]));
    context.canvas.dispatchEvent(new CustomEvent("input"));
  };

  context.canvas.onmouseup = event => {
    mousedown = false;
  };

  render([-55, 0]);
  return context.canvas;
}
```

```{ojs}
fileUrl = `https://raw.githubusercontent.com/cfranken/s2_data/main/files/${Math.round(point[1])}.0_${Math.round(point[0])}.0.csv`;
```

```{ojs}
fileUrl
```

```{ojs}
//| panel: input
viewof thresh = Inputs.range(
  [5, 50], 
  {value: 17, step: 2, label: "Number of bins"}
)
```



```{ojs}
binBoundaries1 = calculateLogBins(0.0001, 1.01, thresh);
```

```{ojs}
function calculateLogBins(start, end, nBins) {
  const logStart = Math.log10(start);
  const logEnd = Math.log10(end);
  const bins = Array.from({length: nBins + 1}, (_, i) => 
    Math.pow(10, logStart + (logEnd - logStart) * i / nBins)
  );
  return bins;
}
```


::: {.panel-tabset}

## Plot

Below is a histogram of the cloud-free fractions for 200m footprints (blue) and 2000m footprints (red) on a logarithmic scale (from 0.1 to 100%)

```{ojs}
Plot.plot({
width,
  x: { type: "log",base:10,
transform: d => Math.max(.01, 100*d)}, 
  y: {grid: true},
  color: {legend: true},
  marks: [
    Plot.rectY(filtered, Plot.binX({y: "count"}, {x: "cf_200", fill: "steelblue", fillOpacity: 0.5,thresholds: binBoundaries1 })),
    Plot.rectY(filtered, Plot.binX({y: "count"}, {x: "cf_2000", fill: "tomato", fillOpacity: 0.5,thresholds: binBoundaries1 })),
    Plot.ruleY([0])
  ]
})
```

Below is the corresponding time-series in the same colors.
```{ojs}
Plot.plot({
  width,  
  y: { grid: true, domain: [0.0, 1.02]  },
  color: { legend: true },
  marks: [
    Plot.axisX({ ticks: d3.utcMonth.every(3) }),
    Plot.lineY(filtered, { 
      x: "Date", 
      y: "cf_200",
      stroke: "steelblue", // Custom line color
      fillOpacity: 0.5,
      strokeWidth: 0.2 // Thin line
    }),
    Plot.dot(filtered, {
      x: "Date",
      y: "cf_200",
      fillOpacity: 0.75,
      fill: "steelblue",
    }),
    Plot.lineY(filtered, { 
      x: "Date", 
      y: "cf_2000",
      stroke: "tomato", // Custom line color
      fillOpacity: 0.5,
      strokeWidth: 0.2
    }),
    Plot.dot(filtered, {
      x: "Date",
      y: "cf_2000",
      fillOpacity: 0.75,
      fill: "tomato"
    }),
    Plot.ruleY([0])
  ]
})
```

## Data

```{ojs}
Inputs.table(data)
```



:::

```{ojs}
//data = FileAttachment("data/subset_data.csv").csv({ typed: true })
//data = d3.csv("https://raw.githubusercontent.com/cfranken/s2_data/main/files/1.0_-55.0.csv")
//print(fileUrl)
data = d3.csv(fileUrl)
```

```{ojs}
filtered = data.filter(function(s2) {
  return s2.cf_2000 < 1.1;
})
```

```{ojs}
// a brave function that takes a sample value and returns the interval that contains it
title = ([d]) => {
  const lo = Math.pow(10, Math.floor(Math.log10(d) * 5) / 5);
  const hi = Math.pow(10, (1 + Math.floor(Math.log10(d) * 5)) / 5);
  return `[${Math.floor(lo)}-${Math.floor(hi - 1)}]`;
}
```

```{ojs}
sphere = ({type: "Sphere"})
```

```{ojs}
graticule = d3.geoGraticule10()
```

```{ojs}
land = topojson.feature(world, world.objects.land)
```

```{ojs}
world = FileAttachment("data/land-50m.json").json()
```

```{ojs}
topojson = require("topojson-client@3")
```